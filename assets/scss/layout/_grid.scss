// /*------------------------------------*\
// =grid
// \*------------------------------------*/
















$screen-xs:                   0 !default;
$screen-sm:                   480px !default;
$screen-md:                   768px !default;
$screen-lg:                   992px !default;
$screen-xl:                   1200px !default;
// $screen-xxl:                  1800px !default;

$container-sm:                100% !default;
$container-md:                100% !default;
$container-lg:                ($screen-lg - 30) !default;
$container-xl:                ($screen-xl - 70) !default;
// $container-xxl:               ($screen-xxl - 30) !default;

$grid-columns:                12 !default;
$grid-gutter-width:           30px !default;



//------------------------------------------------------------------------------
//  Генератор правил для контейнера
//------------------------------------------------------------------------------

@mixin container (
  $xs-grid-gutter:  $grid-gutter-width,
  $sm-grid-gutter:  $grid-gutter-width,
  $md-grid-gutter:  $grid-gutter-width,
  $lg-grid-gutter:  $grid-gutter-width,
  $xl-grid-gutter:  $grid-gutter-width,
  // $xxl-grid-gutter: $grid-gutter-width
) {
  display: block;
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @if ($xs-grid-gutter != 0) {
    padding-left: ($xs-grid-gutter / 2);
    padding-right: ($xs-grid-gutter / 2);
  }

  @media (min-width: $screen-sm) {
    width: $container-sm;

    @if ($sm-grid-gutter != $xs-grid-gutter) {
      padding-left: ($sm-grid-gutter / 2);
      padding-right: ($sm-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-md) {
    width: $container-md;

    @if ($md-grid-gutter != $sm-grid-gutter) {
      padding-left: ($md-grid-gutter / 2);
      padding-right: ($md-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-lg) {
    width: $container-lg;

    @if ($lg-grid-gutter != $md-grid-gutter) {
      padding-left: ($lg-grid-gutter / 2);
      padding-right: ($lg-grid-gutter / 2);
    }
  }

  @media (min-width: $screen-xl) {
    width: $container-xl;

    @if ($xl-grid-gutter != $lg-grid-gutter) {
      padding-left: ($xl-grid-gutter / 2);
      padding-right: ($xl-grid-gutter / 2);
    }
  }

  // @media (min-width: $screen-xxl) {
  //   width: $container-xxl;

  //   @if ($xxl-grid-gutter != $xl-grid-gutter) {
  //     padding-left: ($xxl-grid-gutter / 2);
  //     padding-right: ($xxl-grid-gutter / 2);
  //   }
  // }
}



//------------------------------------------------------------------------------
//  Генератор правил для прямого родителя модульной сетки
//------------------------------------------------------------------------------
//  Принимает:         По умолчанию:        Пояснение:
//  $xs-grid-gutter:   $grid-gutter-width   промежуток между ячейками XS-сетки
//  $sm-grid-gutter:   $grid-gutter-width   промежуток между ячейками SM-сетки
//  $md-grid-gutter:   $grid-gutter-width   промежуток между ячейками MD-сетки
//  $lg-grid-gutter:   $grid-gutter-width   промежуток между ячейками LG-сетки
//  $xl-grid-gutter:   $grid-gutter-width   промежуток между ячейками XL-сетки
//  $xxl-grid-gutter:  $grid-gutter-width   промежуток между ячейками XXL-сетки
//------------------------------------------------------------------------------
// Пример вызова:
// .some-class {
//   @include row (
//     $xs-grid-gutter:  $grid-gutter-width, // отступ по умолчанию
//     $sm-grid-gutter:  0,                  // нет отступа
//     $md-grid-gutter:  $grid-gutter-width  // отступ по умолчанию
//   );
// }
//
// Идентичный вызов:
// .some-class {
//   @include row ( $grid-gutter-width, 0, $grid-gutter-width );
// }
//------------------------------------------------------------------------------

@mixin row (
  $xs-grid-gutter:  $grid-gutter-width,
  $sm-grid-gutter:  $grid-gutter-width,
  $md-grid-gutter:  $grid-gutter-width,
  $lg-grid-gutter:  $grid-gutter-width,
  $xl-grid-gutter:  $grid-gutter-width,
  $xxl-grid-gutter: $grid-gutter-width
) {
  display: flex;
  flex-wrap: wrap;

  & > * { // stylelint-disable-line  selector-combinator-blacklist, plugin/selector-bem-pattern
    flex-basis: 100%;
  }

  @if ($xs-grid-gutter != 0) {
    margin-left: ($xs-grid-gutter / -2);
    margin-right: ($xs-grid-gutter / -2);
  }

  @if ($sm-grid-gutter != $xs-grid-gutter) {

    @media (min-width: $screen-sm) {
      margin-left: ($sm-grid-gutter / -2);
      margin-right: ($sm-grid-gutter / -2);
    }
  }

  @if ($md-grid-gutter != $sm-grid-gutter) {

    @media (min-width: $screen-md) {
      margin-left: ($md-grid-gutter / -2);
      margin-right: ($md-grid-gutter / -2);
    }
  }

  @if ($lg-grid-gutter != $md-grid-gutter) {

    @media (min-width: $screen-lg) {
      margin-left: ($lg-grid-gutter / -2);
      margin-right: ($lg-grid-gutter / -2);
    }
  }

  @if ($xl-grid-gutter != $lg-grid-gutter) {

    @media (min-width: $screen-xl) {
      margin-left: ($xl-grid-gutter / -2);
      margin-right: ($xl-grid-gutter / -2);
    }
  }

  @if ($xxl-grid-gutter != $xl-grid-gutter) {

    @media (min-width: $screen-xxl) {
      margin-left: ($xxl-grid-gutter / -2);
      margin-right: ($xxl-grid-gutter / -2);
    }
  }
}



//------------------------------------------------------------------------------
//  Генератор ширины ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок в этой ячейке)
//  $columns:     $grid-columns;        количество ячеек в ряду
//
//  Возвращает width.
//------------------------------------------------------------------------------

@mixin get-width ($column: 1, $columns: $grid-columns) {
  $width: (100% / $columns) * $column;
  flex: 0 0 $width;
  max-width: $width;
}



//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------

@mixin make-col (
  $column:  1,
  $columns: $grid-columns,
  $gutter:  $grid-gutter-width
) {
  @include get-width($column, $columns);

  // ВНИМАНИЕ!
  // если $gutter == false, в CSS не попадут правила padding-left и padding-right
  @if ($gutter != false) {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}



//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      $grid-columns         ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------

@mixin col (
  $screen:  xs,
  $column:  $grid-columns,
  $columns: $grid-columns,
  $gutter:  $grid-gutter-width
) {

  @if ($screen == xs) {
    @include make-col($column, $columns, $gutter);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      @include make-col($column, $columns, $gutter);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      @include make-col($column, $columns, $gutter);
    }
  }
}



//------------------------------------------------------------------------------
//  Генератор правил для отступа одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      1                     ширина отступа (кол-во колонок)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//------------------------------------------------------------------------------

@mixin col-offset (
  $screen: xs,
  $column: 1,
  $columns: $grid-columns
) {

  @if ($screen == xs) {
    margin-left: ($column * 100% / $columns);
  }

  @if ($screen == sm) {

    @media (min-width: $screen-sm) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == md) {

    @media (min-width: $screen-md) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == lg) {

    @media (min-width: $screen-lg) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == xl) {

    @media (min-width: $screen-xl) {
      margin-left: ($column * 100% / $columns);
    }
  }

  @if ($screen == xxl) {

    @media (min-width: $screen-xxl) {
      margin-left: ($column * 100% / $columns);
    }
  }
}



























// /**
//  *
//  * gutter between grid units
//  * - has to be a fixed value like rem, em or px
//  *
//  */

// $grid-gutter:15px!default;


// /**
//  *
//  * type of classes to use: silent classes or not
//  *
//  */

// $silent-classes:false!default;
// $class-type:unquote(".");

// @if ($silent-classes == true)
// {
//   $class-type:unquote("%");
// }


// /**
//  *
//  * use pull and pull classes
//  *
//  */

// $use-pushclasses:false!default;
// $use-pullclasses:false!default;

// /**
//  *
//  * Default list for media queries in grid
//  *
//  * Usage
//  * - used by media queries mixin
//  * - used to namespace grids
//  *
//  * Nested Lists
//  * - first param: keyword, also used to namespace grid classes
//  * - second param: media query parameters (all media queries are screen based)
//  * - Third param: is the query used for grids or not
//  *
//  * Dimensions
//  * - small:   600px 37.5em
//  * - medium:  760px 47.5em
//  * - large:   1024px  64em
//  * - xlarge:  1140px  71.25em
//  */

// $mq-list:   "small"         "(min-width:37.5em)"       true,
//             "medium"        "(min-width:46.875em)"     true,
//             "large"         "(min-width:64em)"         true,
//             "xlarge"        "(min-width:71.25em)"      true!default;


// /**
//  *
//  * [1] can be used on lists
//  * [2] negative margin left cancels padding for outermost left grid units
//  *
//  */

// #{$class-type}grid
// {
//   list-style:none;  // [1]
//   margin:0;         // [1]
//   padding:0;        // [1]
//   display:block;
//   margin-left:($grid-gutter * -1); // [2]
// }


//   /**
//    *
//    * grid aligned center
//    *
//    */

//   #{$class-type}grid--center
//   {
//     text-align:center;

//     & > #{$class-type}grid__unit
//     {
//       text-align:left;
//     }
//   }


//   /**
//    *
//    * grid aligned right
//    *
//    */

//   #{$class-type}grid--right
//   {
//     text-align:right;

//     & > #{$class-type}grid__unit
//     {
//       text-align:left;
//     }
//   }


//   /**
//    *
//    * grid bottom-margins
//    *
//    */

//    #{$class-type}grid--spaced
//   {

//     & > #{$class-type}grid__unit
//     {
//       margin-bottom:$grid-gutter;
//     }
//   }

//   /**
//    *
//    * grid gutterless
//    *
//    */

//    #{$class-type}grid--gutterless
//   {
//     margin-left:0;

//     & > #{$class-type}grid__unit
//     {
//       padding-left:0;
//     }
//   }

//   /**
//    *
//    * grid gutter double
//    *
//    */

//    #{$class-type}grid--gutterdouble
//   {
//     margin-left:(($grid-gutter * 2) * -1);

//     & > #{$class-type}grid__unit
//     {
//       padding-left:($grid-gutter * 2);
//     }
//   }



// /**
//  *
//  * grid items defined using inline-block
//  * - more flexible than float
//  * - we use border-box to define padding inside boxes
//  *
//  */

// #{$class-type}grid__unit
// {
//   margin:0;
//   padding:0;
//   display:inline-block;
//   vertical-align:top;
//   box-sizing:border-box;
//   width:100%;
//   padding-left:$grid-gutter;
// }

// /**
//  *
//  * mixin to create our grid classes in all media queries
//  * - classes are namespaced using breakpoints defined in mq-list
//  *
//  */

// @mixin make-grid($namespace:"")
// {
//   #{$class-type}#{$namespace}span-full { width:100%; }

//   #{$class-type}#{$namespace}span-1of10 { width:1/10 * 100%; }
//   #{$class-type}#{$namespace}span-2of10 { width:2/10 * 100%; }
//   #{$class-type}#{$namespace}span-3of10 { width:3/10 * 100%; }
//   #{$class-type}#{$namespace}span-4of10 { width:4/10 * 100%; }
//   #{$class-type}#{$namespace}span-5of10 { width:5/10 * 100%; }
//   #{$class-type}#{$namespace}span-6of10 { width:6/10 * 100%; }
//   #{$class-type}#{$namespace}span-7of10 { width:7/10 * 100%; }
//   #{$class-type}#{$namespace}span-8of10 { width:8/10 * 100%; }
//   #{$class-type}#{$namespace}span-9of10 { width:9/10 * 100%; }

//   #{$class-type}#{$namespace}span-1of12 { width:1/12 * 100%; }
//   #{$class-type}#{$namespace}span-2of12 { width:2/12 * 100%; }
//   #{$class-type}#{$namespace}span-3of12 { width:3/12 * 100%; }
//   #{$class-type}#{$namespace}span-4of12 { width:4/12 * 100%; }
//   #{$class-type}#{$namespace}span-5of12 { width:5/12 * 100%; }
//   #{$class-type}#{$namespace}span-6of12 { @extend #{$class-type}#{$namespace}span-5of10; }
//   #{$class-type}#{$namespace}span-7of12 { width:7/12 * 100%; }
//   #{$class-type}#{$namespace}span-8of12 { width:8/12 * 100%; }
//   #{$class-type}#{$namespace}span-9of12 { width:9/12 * 100%; }
//   #{$class-type}#{$namespace}span-10of12 { width:10/12 * 100%; }
//   #{$class-type}#{$namespace}span-11of12 { width:11/12 * 100%; }
// }

// /**
//  *
//  * mixin to create our push classes in all media queries
//  * - classes are namespaced using breakpoints defined in mq-list
//  *
//  */

// @mixin pushclasses($namespace:"")
// {
//   #{$class-type}#{$namespace}push-full { position:relative; left:100%; }

//   #{$class-type}#{$namespace}push-1of10 { position:relative; left:1/10 * 100%; }
//   #{$class-type}#{$namespace}push-2of10 { position:relative; left:2/10 * 100%; }
//   #{$class-type}#{$namespace}push-3of10 { position:relative; left:3/10 * 100%; }
//   #{$class-type}#{$namespace}push-4of10 { position:relative; left:4/10 * 100%; }
//   #{$class-type}#{$namespace}push-5of10 { position:relative; left:5/10 * 100%; }
//   #{$class-type}#{$namespace}push-6of10 { position:relative; left:6/10 * 100%; }
//   #{$class-type}#{$namespace}push-7of10 { position:relative; left:7/10 * 100%; }
//   #{$class-type}#{$namespace}push-8of10 { position:relative; left:8/10 * 100%; }
//   #{$class-type}#{$namespace}push-9of10 { position:relative; left:9/10 * 100%; }

//   #{$class-type}#{$namespace}push-1of12 { position:relative; left:1/12 * 100%; }
//   #{$class-type}#{$namespace}push-2of12 { position:relative; left:2/12 * 100%; }
//   #{$class-type}#{$namespace}push-3of12 { position:relative; left:3/12 * 100%; }
//   #{$class-type}#{$namespace}push-4of12 { position:relative; left:4/12 * 100%; }
//   #{$class-type}#{$namespace}push-5of12 { position:relative; left:5/12 * 100%; }
//   #{$class-type}#{$namespace}push-6of12 { @extend #{$class-type}#{$namespace}push-5of10; }
//   #{$class-type}#{$namespace}push-7of12 { position:relative; left:7/12 * 100%; }
//   #{$class-type}#{$namespace}push-8of12 { position:relative; left:8/12 * 100%; }
//   #{$class-type}#{$namespace}push-9of12 { position:relative; left:9/12 * 100%; }
//   #{$class-type}#{$namespace}push-10of12 { position:relative; left:10/12 * 100%; }
//   #{$class-type}#{$namespace}push-11of12 { position:relative; left:11/12 * 100%; }
// }

// /**
//  *
//  * mixin to create our push classes in all media queries
//  * - classes are namespaced using breakpoints defined in mq-list
//  *
//  */

// @mixin pullclasses($namespace:"")
// {
//   #{$class-type}#{$namespace}pull-full { position:relative; right:100%; }

//   #{$class-type}#{$namespace}pull-1of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-2of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-3of10 { position:relative; right:3/10 * 100%; }
//   #{$class-type}#{$namespace}pull-4of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-5of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-6of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-7of10 { position:relative; right:7/10 * 100%; }
//   #{$class-type}#{$namespace}pull-8of10 { position:relative; right:1/10 * 100%; }
//   #{$class-type}#{$namespace}pull-9of10 { position:relative; right:9/10 * 100%; }

//   #{$class-type}#{$namespace}pull-1of12 { position:relative; right:1/12 * 100%; }
//   #{$class-type}#{$namespace}pull-2of12 { position:relative; right:2/12 * 100%; }
//   #{$class-type}#{$namespace}pull-3of12 { position:relative; right:3/12 * 100%; }
//   #{$class-type}#{$namespace}pull-4of12 { position:relative; right:4/12 * 100%; }
//   #{$class-type}#{$namespace}pull-5of12 { position:relative; right:5/12 * 100%; }
//   #{$class-type}#{$namespace}pull-6of12 { @extend #{$class-type}#{$namespace}pull-6of10; }
//   #{$class-type}#{$namespace}pull-7of12 { position:relative; right:7/12 * 100%; }
//   #{$class-type}#{$namespace}pull-8of12 { position:relative; right:8/12 * 100%; }
//   #{$class-type}#{$namespace}pull-9of12 { position:relative; right:9/12 * 100%; }
//   #{$class-type}#{$namespace}pull-10of12 { position:relative; right:10/12 * 100%; }
//   #{$class-type}#{$namespace}pull-11of12 { position:relative; right:11/12 * 100%; }
// }

// /**
//  *
//  * create non namespaced grid / push / pull classes
//  *
//  */

// @include make-grid();
// @if ($use-pushclasses == true)
// {
//   @include pushclasses();
// }
// @if ($use-pullclasses == true)
// {
//   @include pullclasses();
// }

// /**
//  *
//  * create namespaced grid classes
//  * - using media queries defined in variables.scss
//  *
//  */

// @each $breakpoint in $mq-list
// {
//   $breakpoint-name:   nth($breakpoint, 1);
//   $breakpoint-param:  nth($breakpoint, 2);
//   $breakpoint-grid:   nth($breakpoint, 3);

//   @if ($breakpoint-grid == true)
//   {
//     @media all and #{$breakpoint-param}
//     {
//       @include make-grid("#{$breakpoint-name}-");
//       @if ($use-pushclasses == true)
//       {
//         @include pushclasses("#{$breakpoint-name}-");
//       }
//       @if ($use-pullclasses == true)
//       {
//         @include pullclasses("#{$breakpoint-name}-");
//       }
//     }
//   }
// }
